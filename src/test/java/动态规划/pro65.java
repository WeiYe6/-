package 动态规划;

public class pro65 {

	public static void main(String[] args) {
		// 动态规划- 打家劫舍
//		题目: 打家劫舍
//		你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
//		影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，
//		系统会自动报警。
//		给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
//		示例 1：
//		输入：[1,2,3,1]
//		输出：4
//		解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
//		     偷窃到的最高金额 = 1 + 3 = 4 。
//		     
//		示例 2：
//		输入：[2,7,9,3,1]
//		输出：12
//		解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
//		     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
		int[] nums = { 2, 7, 9, 3, 1 };
		int rob = rob(nums);
		System.out.println(rob);

	}

	public static int rob(int[] nums) {
		// 动态规划五部曲
		// 1.dp数组以及下标的含义: dp[j] -考虑在下标(0-j)房间中所能盗窃的最大金额数为dp[j]
		int[] dp = new int[nums.length];
		// 2.递推公式:
		// 第下标 j 房间偷还是不偷取决与 (j-2)和(j-1)的状态，如果(j-1)房间偷了的话，则j房间不能偷-dp[j] = dp[j-1]
		// 如果第(j-1)房间未偷，可以考虑当前房间-dp[j] = dp[j-2] + nums[j];
		// 所以递推公式为： dp[j] = Math.max(dp[j-1], dp[j-2] + nums[j]);
		// 3.初始化 由我们的递推公式知，我们需要dp[0] 和 dp[1]状态
		// 下标 0表示偷第0下标房间最大是多少？ dp[0] = nums[0]
		// 下标 1表示偷0-1下标房间最大是多少? 因为相邻房间不能偷 dp[1] = Maht.max(dp[0], dp[1])
		if (nums.length == 0) {
			return 0;
		}
		dp[0] = nums[0];
		if (nums.length > 1)
			dp[1] = Math.max(nums[0], nums[1]);
		// 4.遍历顺序: 当前房间需要依靠前面的状态，应该正序遍历
		for (int j = 2; j < nums.length; j++) {
			dp[j] = Math.max(dp[j - 1], dp[j - 2] + nums[j]);
		}
		return dp[nums.length - 1];
	}

}